// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `sonar.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____sonar_h__
#define ____sonar_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <Ice/BuiltinSequences.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace sonar
{

class SonarServerListener;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServerListener>&);
::IceProxy::Ice::Object* upCast(::IceProxy::sonar::SonarServerListener*);

class SonarServer;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServer>&);
::IceProxy::Ice::Object* upCast(::IceProxy::sonar::SonarServer*);

}

}

namespace sonar
{

class SonarServerListener;
bool operator==(const SonarServerListener&, const SonarServerListener&);
bool operator<(const SonarServerListener&, const SonarServerListener&);
::Ice::Object* upCast(::sonar::SonarServerListener*);
typedef ::IceInternal::Handle< ::sonar::SonarServerListener> SonarServerListenerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServerListener> SonarServerListenerPrx;
void __patch(SonarServerListenerPtr&, const ::Ice::ObjectPtr&);

class SonarServer;
bool operator==(const SonarServer&, const SonarServer&);
bool operator<(const SonarServer&, const SonarServer&);
::Ice::Object* upCast(::sonar::SonarServer*);
typedef ::IceInternal::Handle< ::sonar::SonarServer> SonarServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServer> SonarServerPrx;
void __patch(SonarServerPtr&, const ::Ice::ObjectPtr&);

}

namespace sonar
{

enum Status
{
    OK,
    WARN,
    ERROR
};

typedef ::std::vector< ::sonar::Status> StatusSeq;

struct ServerStatus
{
    ::Ice::LongSeq lastReport;
    ::Ice::LongSeq started;
    ::std::string id;
    ::sonar::StatusSeq status;
};

typedef ::std::vector< ::sonar::ServerStatus> ServerStatusSeq;

struct Image
{
    ::sonar::ServerStatusSeq stats;
};

struct Update
{
    ::sonar::ServerStatusSeq updates;
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::sonar::Status>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::sonar::ServerStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::sonar::ServerStatus, S>
{
    static void write(S* __os, const ::sonar::ServerStatus& v)
    {
        __os->write(v.lastReport);
        __os->write(v.started);
        __os->write(v.id);
        __os->write(v.status);
    }
};

template<class S>
struct StreamReader< ::sonar::ServerStatus, S>
{
    static void read(S* __is, ::sonar::ServerStatus& v)
    {
        __is->read(v.lastReport);
        __is->read(v.started);
        __is->read(v.id);
        __is->read(v.status);
    }
};

template<>
struct StreamableTraits< ::sonar::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::sonar::Image, S>
{
    static void write(S* __os, const ::sonar::Image& v)
    {
        __os->write(v.stats);
    }
};

template<class S>
struct StreamReader< ::sonar::Image, S>
{
    static void read(S* __is, ::sonar::Image& v)
    {
        __is->read(v.stats);
    }
};

template<>
struct StreamableTraits< ::sonar::Update>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::sonar::Update, S>
{
    static void write(S* __os, const ::sonar::Update& v)
    {
        __os->write(v.updates);
    }
};

template<class S>
struct StreamReader< ::sonar::Update, S>
{
    static void read(S* __is, ::sonar::Update& v)
    {
        __is->read(v.updates);
    }
};

}

namespace sonar
{

class AMD_SonarServerListener_onImage : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServerListener_onImage> AMD_SonarServerListener_onImagePtr;

class AMD_SonarServerListener_onUpdate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServerListener_onUpdate> AMD_SonarServerListener_onUpdatePtr;

class AMD_SonarServerListener_heartbeat : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServerListener_heartbeat> AMD_SonarServerListener_heartbeatPtr;

class AMD_SonarServerListener_serverUp : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServerListener_serverUp> AMD_SonarServerListener_serverUpPtr;

class AMD_SonarServerListener_serverDown : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServerListener_serverDown> AMD_SonarServerListener_serverDownPtr;

class AMD_SonarServer_onStatus : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_onStatus> AMD_SonarServer_onStatusPtr;

class AMD_SonarServer_addListener : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_addListener> AMD_SonarServer_addListenerPtr;

class AMD_SonarServer_removeListener : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_removeListener> AMD_SonarServer_removeListenerPtr;

class AMD_SonarServer_addListenerByIdent : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_addListenerByIdent> AMD_SonarServer_addListenerByIdentPtr;

class AMD_SonarServer_removeListenerByIdent : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_removeListenerByIdent> AMD_SonarServer_removeListenerByIdentPtr;

class AMD_SonarServer_getStatuses : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::sonar::ServerStatusSeq&) = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_getStatuses> AMD_SonarServer_getStatusesPtr;

class AMD_SonarServer_loadConfig : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::sonar::AMD_SonarServer_loadConfig> AMD_SonarServer_loadConfigPtr;

}

namespace IceAsync
{

namespace sonar
{

class AMD_SonarServerListener_onImage : public ::sonar::AMD_SonarServerListener_onImage, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServerListener_onImage(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServerListener_onUpdate : public ::sonar::AMD_SonarServerListener_onUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServerListener_onUpdate(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServerListener_heartbeat : public ::sonar::AMD_SonarServerListener_heartbeat, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServerListener_heartbeat(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServerListener_serverUp : public ::sonar::AMD_SonarServerListener_serverUp, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServerListener_serverUp(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServerListener_serverDown : public ::sonar::AMD_SonarServerListener_serverDown, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServerListener_serverDown(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_onStatus : public ::sonar::AMD_SonarServer_onStatus, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_onStatus(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_addListener : public ::sonar::AMD_SonarServer_addListener, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_addListener(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_removeListener : public ::sonar::AMD_SonarServer_removeListener, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_removeListener(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_addListenerByIdent : public ::sonar::AMD_SonarServer_addListenerByIdent, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_addListenerByIdent(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_removeListenerByIdent : public ::sonar::AMD_SonarServer_removeListenerByIdent, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_removeListenerByIdent(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_SonarServer_getStatuses : public ::sonar::AMD_SonarServer_getStatuses, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_getStatuses(::IceInternal::Incoming&);

    virtual void ice_response(const ::sonar::ServerStatusSeq&);
};

class AMD_SonarServer_loadConfig : public ::sonar::AMD_SonarServer_loadConfig, public ::IceInternal::IncomingAsync
{
public:

    AMD_SonarServer_loadConfig(::IceInternal::Incoming&);

    virtual void ice_response(::Ice::Int);
};

}

}

namespace sonar
{

class Callback_SonarServerListener_onImage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServerListener_onImage_Base> Callback_SonarServerListener_onImagePtr;

class Callback_SonarServerListener_onUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServerListener_onUpdate_Base> Callback_SonarServerListener_onUpdatePtr;

class Callback_SonarServerListener_heartbeat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServerListener_heartbeat_Base> Callback_SonarServerListener_heartbeatPtr;

class Callback_SonarServerListener_serverUp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServerListener_serverUp_Base> Callback_SonarServerListener_serverUpPtr;

class Callback_SonarServerListener_serverDown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServerListener_serverDown_Base> Callback_SonarServerListener_serverDownPtr;

class Callback_SonarServer_onStatus_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_onStatus_Base> Callback_SonarServer_onStatusPtr;

class Callback_SonarServer_addListener_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_addListener_Base> Callback_SonarServer_addListenerPtr;

class Callback_SonarServer_removeListener_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_removeListener_Base> Callback_SonarServer_removeListenerPtr;

class Callback_SonarServer_addListenerByIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_addListenerByIdent_Base> Callback_SonarServer_addListenerByIdentPtr;

class Callback_SonarServer_removeListenerByIdent_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_removeListenerByIdent_Base> Callback_SonarServer_removeListenerByIdentPtr;

class Callback_SonarServer_getStatuses_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_getStatuses_Base> Callback_SonarServer_getStatusesPtr;

class Callback_SonarServer_loadConfig_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_SonarServer_loadConfig_Base> Callback_SonarServer_loadConfigPtr;

}

namespace IceProxy
{

namespace sonar
{

class SonarServerListener : virtual public ::IceProxy::Ice::Object
{
public:

    void onImage(const ::sonar::Image& __p_img)
    {
        onImage(__p_img, 0);
    }
    void onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx)
    {
        onImage(__p_img, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onImage(const ::sonar::Image& __p_img, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_img, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::sonar::Image& __p_img, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_img, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onImage(__p_img, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onImage(__p_img, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img)
    {
        return begin_onImage(__p_img, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx)
    {
        return begin_onImage(__p_img, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img, const ::sonar::Callback_SonarServerListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServerListener_onImagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onImage(__p_img, &__ctx, __del, __cookie);
    }

    void end_onImage(const ::Ice::AsyncResultPtr&);
    
private:

    void onImage(const ::sonar::Image&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onImage(const ::sonar::Image&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void onUpdate(const ::sonar::Update& __p_upd)
    {
        onUpdate(__p_upd, 0);
    }
    void onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx)
    {
        onUpdate(__p_upd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::sonar::Update& __p_upd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onUpdate(__p_upd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::sonar::Update& __p_upd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onUpdate(__p_upd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onUpdate(__p_upd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onUpdate(__p_upd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd)
    {
        return begin_onUpdate(__p_upd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx)
    {
        return begin_onUpdate(__p_upd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_upd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_upd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd, const ::sonar::Callback_SonarServerListener_onUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_upd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServerListener_onUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onUpdate(__p_upd, &__ctx, __del, __cookie);
    }

    void end_onUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void onUpdate(const ::sonar::Update&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onUpdate(const ::sonar::Update&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void heartbeat(const ::sonar::Update& __p_upd)
    {
        heartbeat(__p_upd, 0);
    }
    void heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx)
    {
        heartbeat(__p_upd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_heartbeat(const ::sonar::Update& __p_upd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_heartbeat(__p_upd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_heartbeat(const ::sonar::Update& __p_upd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_heartbeat(__p_upd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_heartbeat(__p_upd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_heartbeat(__p_upd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd)
    {
        return begin_heartbeat(__p_upd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx)
    {
        return begin_heartbeat(__p_upd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(__p_upd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(__p_upd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd, const ::sonar::Callback_SonarServerListener_heartbeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(__p_upd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServerListener_heartbeatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_heartbeat(__p_upd, &__ctx, __del, __cookie);
    }

    void end_heartbeat(const ::Ice::AsyncResultPtr&);
    
private:

    void heartbeat(const ::sonar::Update&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_heartbeat(const ::sonar::Update&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void serverUp(const ::std::string& __p_msg)
    {
        serverUp(__p_msg, 0);
    }
    void serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx)
    {
        serverUp(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_serverUp(const ::std::string& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_serverUp(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_serverUp(const ::std::string& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_serverUp(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_serverUp(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_serverUp(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg)
    {
        return begin_serverUp(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_serverUp(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverUp(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverUp(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg, const ::sonar::Callback_SonarServerListener_serverUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverUp(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServerListener_serverUpPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverUp(__p_msg, &__ctx, __del, __cookie);
    }

    void end_serverUp(const ::Ice::AsyncResultPtr&);
    
private:

    void serverUp(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_serverUp(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void serverDown(const ::std::string& __p_msg)
    {
        serverDown(__p_msg, 0);
    }
    void serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx)
    {
        serverDown(__p_msg, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_serverDown(const ::std::string& __p_msg, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_serverDown(__p_msg, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_serverDown(const ::std::string& __p_msg, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_serverDown(__p_msg, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_serverDown(__p_msg, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_serverDown(__p_msg, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg)
    {
        return begin_serverDown(__p_msg, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx)
    {
        return begin_serverDown(__p_msg, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverDown(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverDown(__p_msg, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg, const ::sonar::Callback_SonarServerListener_serverDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverDown(__p_msg, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServerListener_serverDownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_serverDown(__p_msg, &__ctx, __del, __cookie);
    }

    void end_serverDown(const ::Ice::AsyncResultPtr&);
    
private:

    void serverDown(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_serverDown(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_secure(bool __secure) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_twoway() const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_oneway() const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_batchOneway() const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_datagram() const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_batchDatagram() const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_compress(bool __compress) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServerListener> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SonarServerListener*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class SonarServer : virtual public ::IceProxy::Ice::Object
{
public:

    void onStatus(const ::sonar::ServerStatusSeq& __p_s)
    {
        onStatus(__p_s, 0);
    }
    void onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx)
    {
        onStatus(__p_s, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onStatus(__p_s, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onStatus(__p_s, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_onStatus(__p_s, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_onStatus(__p_s, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s)
    {
        return begin_onStatus(__p_s, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx)
    {
        return begin_onStatus(__p_s, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onStatus(__p_s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onStatus(__p_s, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::sonar::Callback_SonarServer_onStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onStatus(__p_s, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_onStatusPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_onStatus(__p_s, &__ctx, __del, __cookie);
    }

    void end_onStatus(const ::Ice::AsyncResultPtr&);
    
private:

    void onStatus(const ::sonar::ServerStatusSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_onStatus(const ::sonar::ServerStatusSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addListener(const ::sonar::SonarServerListenerPtr& __p_listener)
    {
        addListener(__p_listener, 0);
    }
    void addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx)
    {
        addListener(__p_listener, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListener(__p_listener, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListener(__p_listener, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListener(__p_listener, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListener(__p_listener, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener)
    {
        return begin_addListener(__p_listener, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx)
    {
        return begin_addListener(__p_listener, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::sonar::Callback_SonarServer_addListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_addListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListener(__p_listener, &__ctx, __del, __cookie);
    }

    void end_addListener(const ::Ice::AsyncResultPtr&);
    
private:

    void addListener(const ::sonar::SonarServerListenerPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addListener(const ::sonar::SonarServerListenerPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeListener(const ::sonar::SonarServerListenerPtr& __p_listener)
    {
        removeListener(__p_listener, 0);
    }
    void removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx)
    {
        removeListener(__p_listener, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeListener(__p_listener, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeListener(__p_listener, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeListener(__p_listener, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeListener(__p_listener, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener)
    {
        return begin_removeListener(__p_listener, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx)
    {
        return begin_removeListener(__p_listener, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListener(__p_listener, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::sonar::Callback_SonarServer_removeListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListener(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_removeListenerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListener(__p_listener, &__ctx, __del, __cookie);
    }

    void end_removeListener(const ::Ice::AsyncResultPtr&);
    
private:

    void removeListener(const ::sonar::SonarServerListenerPtr&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeListener(const ::sonar::SonarServerListenerPtr&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void addListenerByIdent(const ::Ice::Identity& __p_listener)
    {
        addListenerByIdent(__p_listener, 0);
    }
    void addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx)
    {
        addListenerByIdent(__p_listener, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListenerByIdent(__p_listener, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListenerByIdent(__p_listener, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_addListenerByIdent(__p_listener, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_addListenerByIdent(__p_listener, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener)
    {
        return begin_addListenerByIdent(__p_listener, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx)
    {
        return begin_addListenerByIdent(__p_listener, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerByIdent(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerByIdent(__p_listener, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::sonar::Callback_SonarServer_addListenerByIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerByIdent(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_addListenerByIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_addListenerByIdent(__p_listener, &__ctx, __del, __cookie);
    }

    void end_addListenerByIdent(const ::Ice::AsyncResultPtr&);
    
private:

    void addListenerByIdent(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_addListenerByIdent(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void removeListenerByIdent(const ::Ice::Identity& __p_listener)
    {
        removeListenerByIdent(__p_listener, 0);
    }
    void removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx)
    {
        removeListenerByIdent(__p_listener, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeListenerByIdent(__p_listener, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeListenerByIdent(__p_listener, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_removeListenerByIdent(__p_listener, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_removeListenerByIdent(__p_listener, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener)
    {
        return begin_removeListenerByIdent(__p_listener, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx)
    {
        return begin_removeListenerByIdent(__p_listener, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListenerByIdent(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListenerByIdent(__p_listener, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::sonar::Callback_SonarServer_removeListenerByIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListenerByIdent(__p_listener, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_removeListenerByIdentPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_removeListenerByIdent(__p_listener, &__ctx, __del, __cookie);
    }

    void end_removeListenerByIdent(const ::Ice::AsyncResultPtr&);
    
private:

    void removeListenerByIdent(const ::Ice::Identity&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_removeListenerByIdent(const ::Ice::Identity&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::sonar::ServerStatusSeq getStatuses()
    {
        return getStatuses(0);
    }
    ::sonar::ServerStatusSeq getStatuses(const ::Ice::Context& __ctx)
    {
        return getStatuses(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStatuses(const ::IceInternal::Function<void (const ::sonar::ServerStatusSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatuses(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatuses(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatuses(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStatuses(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::sonar::ServerStatusSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStatuses(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStatuses(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStatuses(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStatuses(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::sonar::ServerStatusSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStatuses()
    {
        return begin_getStatuses(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatuses(const ::Ice::Context& __ctx)
    {
        return begin_getStatuses(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStatuses(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatuses(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatuses(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatuses(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatuses(const ::sonar::Callback_SonarServer_getStatusesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatuses(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStatuses(const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_getStatusesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStatuses(&__ctx, __del, __cookie);
    }

    ::sonar::ServerStatusSeq end_getStatuses(const ::Ice::AsyncResultPtr&);
    
private:

    ::sonar::ServerStatusSeq getStatuses(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStatuses(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int loadConfig(const ::std::string& __p_fn)
    {
        return loadConfig(__p_fn, 0);
    }
    ::Ice::Int loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx)
    {
        return loadConfig(__p_fn, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadConfig(const ::std::string& __p_fn, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadConfig(__p_fn, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadConfig(const ::std::string& __p_fn, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadConfig(__p_fn, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadConfig(__p_fn, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadConfig(__p_fn, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn)
    {
        return begin_loadConfig(__p_fn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx)
    {
        return begin_loadConfig(__p_fn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadConfig(__p_fn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadConfig(__p_fn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn, const ::sonar::Callback_SonarServer_loadConfigPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadConfig(__p_fn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context& __ctx, const ::sonar::Callback_SonarServer_loadConfigPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadConfig(__p_fn, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_loadConfig(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int loadConfig(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadConfig(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<SonarServer> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_secure(bool __secure) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_twoway() const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_oneway() const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_batchOneway() const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_datagram() const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_batchDatagram() const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_compress(bool __compress) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_timeout(int __timeout) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<SonarServer> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<SonarServer*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace sonar
{

class SonarServerListener : virtual public ::Ice::Object
{
public:

    typedef SonarServerListenerPrx ProxyType;
    typedef SonarServerListenerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void onImage_async(const ::sonar::AMD_SonarServerListener_onImagePtr&, const ::sonar::Image&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void onUpdate_async(const ::sonar::AMD_SonarServerListener_onUpdatePtr&, const ::sonar::Update&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void heartbeat_async(const ::sonar::AMD_SonarServerListener_heartbeatPtr&, const ::sonar::Update&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___heartbeat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void serverUp_async(const ::sonar::AMD_SonarServerListener_serverUpPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___serverUp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void serverDown_async(const ::sonar::AMD_SonarServerListener_serverDownPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___serverDown(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const SonarServerListener& l, const SonarServerListener& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SonarServerListener& l, const SonarServerListener& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class SonarServer : virtual public ::Ice::Object
{
public:

    typedef SonarServerPrx ProxyType;
    typedef SonarServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void onStatus_async(const ::sonar::AMD_SonarServer_onStatusPtr&, const ::sonar::ServerStatusSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___onStatus(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListener_async(const ::sonar::AMD_SonarServer_addListenerPtr&, const ::sonar::SonarServerListenerPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addListener(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeListener_async(const ::sonar::AMD_SonarServer_removeListenerPtr&, const ::sonar::SonarServerListenerPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeListener(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void addListenerByIdent_async(const ::sonar::AMD_SonarServer_addListenerByIdentPtr&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___addListenerByIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void removeListenerByIdent_async(const ::sonar::AMD_SonarServer_removeListenerByIdentPtr&, const ::Ice::Identity&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___removeListenerByIdent(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getStatuses_async(const ::sonar::AMD_SonarServer_getStatusesPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStatuses(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadConfig_async(const ::sonar::AMD_SonarServer_loadConfigPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadConfig(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const SonarServer& l, const SonarServer& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const SonarServer& l, const SonarServer& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace sonar
{

template<class T>
class CallbackNC_SonarServerListener_onImage : public Callback_SonarServerListener_onImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServerListener_onImage : public Callback_SonarServerListener_onImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServerListener_onImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onImagePtr
newCallback_SonarServerListener_onImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServerListener_onUpdate : public Callback_SonarServerListener_onUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_onUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServerListener_onUpdate : public Callback_SonarServerListener_onUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServerListener_onUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_onUpdatePtr
newCallback_SonarServerListener_onUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_onUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServerListener_heartbeat : public Callback_SonarServerListener_heartbeat_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServerListener_heartbeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_heartbeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_heartbeat<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_heartbeat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_heartbeat<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServerListener_heartbeat : public Callback_SonarServerListener_heartbeat_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServerListener_heartbeat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_heartbeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_heartbeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_heartbeat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_heartbeatPtr
newCallback_SonarServerListener_heartbeat(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_heartbeat<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServerListener_serverUp : public Callback_SonarServerListener_serverUp_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServerListener_serverUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverUp<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverUp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverUp<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServerListener_serverUp : public Callback_SonarServerListener_serverUp_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServerListener_serverUp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverUp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverUpPtr
newCallback_SonarServerListener_serverUp(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverUp<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServerListener_serverDown : public Callback_SonarServerListener_serverDown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServerListener_serverDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverDown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverDown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServerListener_serverDown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServerListener_serverDown : public Callback_SonarServerListener_serverDown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServerListener_serverDown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverDown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServerListener_serverDownPtr
newCallback_SonarServerListener_serverDown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServerListener_serverDown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_onStatus : public Callback_SonarServer_onStatus_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServer_onStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_onStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_onStatus<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_onStatus<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_onStatus<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_onStatus : public Callback_SonarServer_onStatus_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServer_onStatus(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_onStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_onStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_onStatus<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_onStatusPtr
newCallback_SonarServer_onStatus(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_onStatus<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_addListener : public Callback_SonarServer_addListener_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListener<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_addListener : public Callback_SonarServer_addListener_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServer_addListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerPtr
newCallback_SonarServer_addListener(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_removeListener : public Callback_SonarServer_removeListener_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServer_removeListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListener<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListener<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListener<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_removeListener : public Callback_SonarServer_removeListener_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServer_removeListener(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListener<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerPtr
newCallback_SonarServer_removeListener(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListener<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_addListenerByIdent : public Callback_SonarServer_addListenerByIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServer_addListenerByIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListenerByIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListenerByIdent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListenerByIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_addListenerByIdent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_addListenerByIdent : public Callback_SonarServer_addListenerByIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServer_addListenerByIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListenerByIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListenerByIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListenerByIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_addListenerByIdentPtr
newCallback_SonarServer_addListenerByIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_addListenerByIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_removeListenerByIdent : public Callback_SonarServer_removeListenerByIdent_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_SonarServer_removeListenerByIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListenerByIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListenerByIdent<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListenerByIdent<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_removeListenerByIdent<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_removeListenerByIdent : public Callback_SonarServer_removeListenerByIdent_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_SonarServer_removeListenerByIdent(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListenerByIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListenerByIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListenerByIdent<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_removeListenerByIdentPtr
newCallback_SonarServer_removeListenerByIdent(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_removeListenerByIdent<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_getStatuses : public Callback_SonarServer_getStatuses_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::sonar::ServerStatusSeq&);

    CallbackNC_SonarServer_getStatuses(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
        ::sonar::ServerStatusSeq __ret;
        try
        {
            __ret = __proxy->end_getStatuses(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_SonarServer_getStatusesPtr
newCallback_SonarServer_getStatuses(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::sonar::ServerStatusSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_getStatuses<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_getStatusesPtr
newCallback_SonarServer_getStatuses(T* instance, void (T::*cb)(const ::sonar::ServerStatusSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_getStatuses<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_getStatuses : public Callback_SonarServer_getStatuses_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::sonar::ServerStatusSeq&, const CT&);

    Callback_SonarServer_getStatuses(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
        ::sonar::ServerStatusSeq __ret;
        try
        {
            __ret = __proxy->end_getStatuses(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_SonarServer_getStatusesPtr
newCallback_SonarServer_getStatuses(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::sonar::ServerStatusSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_getStatuses<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_getStatusesPtr
newCallback_SonarServer_getStatuses(T* instance, void (T::*cb)(const ::sonar::ServerStatusSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_getStatuses<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_SonarServer_loadConfig : public Callback_SonarServer_loadConfig_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_SonarServer_loadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_loadConfig(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_SonarServer_loadConfigPtr
newCallback_SonarServer_loadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_loadConfig<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_SonarServer_loadConfigPtr
newCallback_SonarServer_loadConfig(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_SonarServer_loadConfig<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_SonarServer_loadConfig : public Callback_SonarServer_loadConfig_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_SonarServer_loadConfig(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_loadConfig(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_SonarServer_loadConfigPtr
newCallback_SonarServer_loadConfig(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_loadConfig<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_SonarServer_loadConfigPtr
newCallback_SonarServer_loadConfig(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_SonarServer_loadConfig<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
