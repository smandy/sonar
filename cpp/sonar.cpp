//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.9
//
// <auto-generated>
//
// Generated from file `sonar.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <sonar.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 9
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_sonar_SonarServerListener_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServerListener"
};
const ::std::string iceC_sonar_SonarServerListener_ops[] =
{
    "heartbeat",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onUpdate",
    "serverDown",
    "serverUp"
};
const ::std::string iceC_sonar_SonarServerListener_onImage_name = "onImage";
const ::std::string iceC_sonar_SonarServerListener_onUpdate_name = "onUpdate";
const ::std::string iceC_sonar_SonarServerListener_heartbeat_name = "heartbeat";
const ::std::string iceC_sonar_SonarServerListener_serverUp_name = "serverUp";
const ::std::string iceC_sonar_SonarServerListener_serverDown_name = "serverDown";

const ::std::string iceC_sonar_SonarServer_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServer"
};
const ::std::string iceC_sonar_SonarServer_ops[] =
{
    "addListener",
    "getStatuses",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadConfig",
    "onStatus",
    "removeListener"
};
const ::std::string iceC_sonar_SonarServer_onStatus_name = "onStatus";
const ::std::string iceC_sonar_SonarServer_addListener_name = "addListener";
const ::std::string iceC_sonar_SonarServer_removeListener_name = "removeListener";
const ::std::string iceC_sonar_SonarServer_getStatuses_name = "getStatuses";
const ::std::string iceC_sonar_SonarServer_loadConfig_name = "loadConfig";

}

bool
sonar::SonarServerListener::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_sonar_SonarServerListener_ids, iceC_sonar_SonarServerListener_ids + 2, s);
}

::std::vector<::std::string>
sonar::SonarServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_sonar_SonarServerListener_ids[0], &iceC_sonar_SonarServerListener_ids[2]);
}

::std::string
sonar::SonarServerListener::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
sonar::SonarServerListener::ice_staticId()
{
    static const ::std::string typeId = "::sonar::SonarServerListener";
    return typeId;
}

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_onImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Image iceP_img;
    istr->readAll(iceP_img);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onImageAsync(::std::move(iceP_img), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_onUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Update iceP_upd;
    istr->readAll(iceP_upd);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onUpdateAsync(::std::move(iceP_upd), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_heartbeat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    Update iceP_upd;
    istr->readAll(iceP_upd);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->heartbeatAsync(::std::move(iceP_upd), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_serverUp(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    istr->readAll(iceP_msg);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->serverUpAsync(::std::move(iceP_msg), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_serverDown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_msg;
    istr->readAll(iceP_msg);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->serverDownAsync(::std::move(iceP_msg), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_sonar_SonarServerListener_ops, iceC_sonar_SonarServerListener_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_sonar_SonarServerListener_ops)
    {
        case 0:
        {
            return _iceD_heartbeat(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_onImage(in, current);
        }
        case 6:
        {
            return _iceD_onUpdate(in, current);
        }
        case 7:
        {
            return _iceD_serverDown(in, current);
        }
        case 8:
        {
            return _iceD_serverUp(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
sonar::SonarServer::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_sonar_SonarServer_ids, iceC_sonar_SonarServer_ids + 2, s);
}

::std::vector<::std::string>
sonar::SonarServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_sonar_SonarServer_ids[0], &iceC_sonar_SonarServer_ids[2]);
}

::std::string
sonar::SonarServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
sonar::SonarServer::ice_staticId()
{
    static const ::std::string typeId = "::sonar::SonarServer";
    return typeId;
}

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_onStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ServerStatusSeq iceP_s;
    istr->readAll(iceP_s);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->onStatusAsync(::std::move(iceP_s), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_addListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_listener;
    istr->readAll(iceP_listener);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->addListenerAsync(::std::move(iceP_listener), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_removeListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<::Ice::Value> iceP_listener;
    istr->readAll(iceP_listener);
    istr->readPendingValues();
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    this->removeListenerAsync(::std::move(iceP_listener), inA->response(), inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_getStatuses(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](const ServerStatusSeq& ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->getStatusesAsync(responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_loadConfig(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::string iceP_fn;
    istr->readAll(iceP_fn);
    inS.endReadParams();
    auto inA = ::IceInternal::IncomingAsync::create(inS);
    auto responseCB = [inA](int ret)
    {
        auto ostr = inA->startWriteParams();
        ostr->writeAll(ret);
        inA->endWriteParams();
        inA->completed();
    };
    this->loadConfigAsync(::std::move(iceP_fn), responseCB, inA->exception(), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_sonar_SonarServer_ops, iceC_sonar_SonarServer_ops + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_sonar_SonarServer_ops)
    {
        case 0:
        {
            return _iceD_addListener(in, current);
        }
        case 1:
        {
            return _iceD_getStatuses(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_loadConfig(in, current);
        }
        case 7:
        {
            return _iceD_onStatus(in, current);
        }
        case 8:
        {
            return _iceD_removeListener(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerListenerPrx::_iceI_onImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Image& iceP_img, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServerListener_onImage_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_img);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerListenerPrx::_iceI_onUpdate(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Update& iceP_upd, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServerListener_onUpdate_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_upd);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerListenerPrx::_iceI_heartbeat(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const Update& iceP_upd, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServerListener_heartbeat_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_upd);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerListenerPrx::_iceI_serverUp(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServerListener_serverUp_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerListenerPrx::_iceI_serverDown(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::string& iceP_msg, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServerListener_serverDown_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_msg);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
sonar::SonarServerListenerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SonarServerListenerPrx>();
}
/// \endcond

const ::std::string&
sonar::SonarServerListenerPrx::ice_staticId()
{
    return SonarServerListener::ice_staticId();
}

/// \cond INTERNAL
void
sonar::SonarServerPrx::_iceI_onStatus(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ServerStatusSeq& iceP_s, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServer_onStatus_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_s);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerPrx::_iceI_addListener(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_listener, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServer_addListener_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listener);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerPrx::_iceI_removeListener(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<::Ice::Value>& iceP_listener, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_sonar_SonarServer_removeListener_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listener);
            ostr->writePendingValues();
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerPrx::_iceI_getStatuses(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::sonar::ServerStatusSeq>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_sonar_SonarServer_getStatuses_name);
    outAsync->invoke(iceC_sonar_SonarServer_getStatuses_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
sonar::SonarServerPrx::_iceI_loadConfig(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::std::string& iceP_fn, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_sonar_SonarServer_loadConfig_name);
    outAsync->invoke(iceC_sonar_SonarServer_loadConfig_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_fn);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
sonar::SonarServerPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SonarServerPrx>();
}
/// \endcond

const ::std::string&
sonar::SonarServerPrx::ice_staticId()
{
    return SonarServer::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_sonar_SonarServerListener_onImage_name = "onImage";

const ::std::string iceC_sonar_SonarServerListener_onUpdate_name = "onUpdate";

const ::std::string iceC_sonar_SonarServerListener_heartbeat_name = "heartbeat";

const ::std::string iceC_sonar_SonarServerListener_serverUp_name = "serverUp";

const ::std::string iceC_sonar_SonarServerListener_serverDown_name = "serverDown";

const ::std::string iceC_sonar_SonarServer_onStatus_name = "onStatus";

const ::std::string iceC_sonar_SonarServer_addListener_name = "addListener";

const ::std::string iceC_sonar_SonarServer_removeListener_name = "removeListener";

const ::std::string iceC_sonar_SonarServer_getStatuses_name = "getStatuses";

const ::std::string iceC_sonar_SonarServer_loadConfig_name = "loadConfig";

}

sonar::AMD_SonarServerListener_onImage::~AMD_SonarServerListener_onImage()
{
}

sonar::AMD_SonarServerListener_onUpdate::~AMD_SonarServerListener_onUpdate()
{
}

sonar::AMD_SonarServerListener_heartbeat::~AMD_SonarServerListener_heartbeat()
{
}

sonar::AMD_SonarServerListener_serverUp::~AMD_SonarServerListener_serverUp()
{
}

sonar::AMD_SonarServerListener_serverDown::~AMD_SonarServerListener_serverDown()
{
}

sonar::AMD_SonarServer_onStatus::~AMD_SonarServer_onStatus()
{
}

sonar::AMD_SonarServer_addListener::~AMD_SonarServer_addListener()
{
}

sonar::AMD_SonarServer_removeListener::~AMD_SonarServer_removeListener()
{
}

sonar::AMD_SonarServer_getStatuses::~AMD_SonarServer_getStatuses()
{
}

sonar::AMD_SonarServer_loadConfig::~AMD_SonarServer_loadConfig()
{
}

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServerListener_onImage::AMD_SonarServerListener_onImage(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_onImage::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServerListener_onUpdate::AMD_SonarServerListener_onUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_onUpdate::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServerListener_heartbeat::AMD_SonarServerListener_heartbeat(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_heartbeat::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServerListener_serverUp::AMD_SonarServerListener_serverUp(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_serverUp::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServerListener_serverDown::AMD_SonarServerListener_serverDown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_serverDown::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServer_onStatus::AMD_SonarServer_onStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_onStatus::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServer_addListener::AMD_SonarServer_addListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_addListener::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServer_removeListener::AMD_SonarServer_removeListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_removeListener::ice_response()
{
    writeEmptyParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServer_getStatuses::AMD_SonarServer_getStatuses(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_getStatuses::ice_response(const ::sonar::ServerStatusSeq& ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
IceAsync::sonar::AMD_SonarServer_loadConfig::AMD_SonarServer_loadConfig(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_loadConfig::ice_response(::Ice::Int ret)
{
    ::Ice::OutputStream* ostr = startWriteParams();
    ostr->write(ret);
    endWriteParams();
    completed();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::sonar::upCast(SonarServerListener* p) { return p; }

void
::IceProxy::sonar::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SonarServerListener>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SonarServerListener;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::_iceI_begin_onImage(const ::sonar::Image& iceP_img, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServerListener_onImage_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServerListener_onImage_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_img);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServerListener_onImage_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServerListener::end_onImage(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServerListener_onImage_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::_iceI_begin_onUpdate(const ::sonar::Update& iceP_upd, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServerListener_onUpdate_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServerListener_onUpdate_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_upd);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServerListener_onUpdate_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServerListener::end_onUpdate(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServerListener_onUpdate_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::_iceI_begin_heartbeat(const ::sonar::Update& iceP_upd, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServerListener_heartbeat_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServerListener_heartbeat_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_upd);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServerListener_heartbeat_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServerListener::end_heartbeat(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServerListener_heartbeat_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::_iceI_begin_serverUp(const ::std::string& iceP_msg, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServerListener_serverUp_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServerListener_serverUp_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServerListener_serverUp_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServerListener::end_serverUp(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServerListener_serverUp_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::_iceI_begin_serverDown(const ::std::string& iceP_msg, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServerListener_serverDown_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServerListener_serverDown_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_msg);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServerListener_serverDown_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServerListener::end_serverDown(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServerListener_serverDown_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::sonar::SonarServerListener::_newInstance() const
{
    return new SonarServerListener;
}
/// \endcond

const ::std::string&
IceProxy::sonar::SonarServerListener::ice_staticId()
{
    return ::sonar::SonarServerListener::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::sonar::upCast(SonarServer* p) { return p; }

void
::IceProxy::sonar::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SonarServer>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SonarServer;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::_iceI_begin_onStatus(const ::sonar::ServerStatusSeq& iceP_s, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServer_onStatus_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServer_onStatus_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_s);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServer_onStatus_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServer::end_onStatus(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServer_onStatus_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::_iceI_begin_addListener(const ::sonar::SonarServerListenerPtr& iceP_listener, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServer_addListener_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServer_addListener_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listener);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServer_addListener_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServer::end_addListener(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServer_addListener_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::_iceI_begin_removeListener(const ::sonar::SonarServerListenerPtr& iceP_listener, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServer_removeListener_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServer_removeListener_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listener);
        ostr->writePendingValues();
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServer_removeListener_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::sonar::SonarServer::end_removeListener(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_sonar_SonarServer_removeListener_name);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::_iceI_begin_getStatuses(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_sonar_SonarServer_getStatuses_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServer_getStatuses_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServer_getStatuses_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_sonar_SonarServer_getStatuses_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::sonar::ServerStatusSeq
IceProxy::sonar::SonarServer::end_getStatuses(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_sonar_SonarServer_getStatuses_name);
    ::sonar::ServerStatusSeq ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::_iceI_begin_loadConfig(const ::std::string& iceP_fn, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_sonar_SonarServer_loadConfig_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_sonar_SonarServer_loadConfig_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_sonar_SonarServer_loadConfig_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_fn);
        result->endWriteParams();
        result->invoke(iceC_sonar_SonarServer_loadConfig_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::sonar::SonarServer::end_loadConfig(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_sonar_SonarServer_loadConfig_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::sonar::SonarServer::_newInstance() const
{
    return new SonarServer;
}
/// \endcond

const ::std::string&
IceProxy::sonar::SonarServer::ice_staticId()
{
    return ::sonar::SonarServer::ice_staticId();
}

sonar::SonarServerListener::~SonarServerListener()
{
}

/// \cond INTERNAL
::Ice::Object* sonar::upCast(SonarServerListener* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_sonar_SonarServerListener_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServerListener"
};

}

bool
sonar::SonarServerListener::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_sonar_SonarServerListener_ids, iceC_sonar_SonarServerListener_ids + 2, s);
}

::std::vector< ::std::string>
sonar::SonarServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_sonar_SonarServerListener_ids[0], &iceC_sonar_SonarServerListener_ids[2]);
}

const ::std::string&
sonar::SonarServerListener::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
sonar::SonarServerListener::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::sonar::SonarServerListener";
    return typeId;
#else
    return iceC_sonar_SonarServerListener_ids[1];
#endif
}

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_onImage(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Image iceP_img;
    istr->read(iceP_img);
    inS.endReadParams();
    this->onImage_async(new IceAsync::sonar::AMD_SonarServerListener_onImage(inS), iceP_img, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_onUpdate(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Update iceP_upd;
    istr->read(iceP_upd);
    inS.endReadParams();
    this->onUpdate_async(new IceAsync::sonar::AMD_SonarServerListener_onUpdate(inS), iceP_upd, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_heartbeat(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    Update iceP_upd;
    istr->read(iceP_upd);
    inS.endReadParams();
    this->heartbeat_async(new IceAsync::sonar::AMD_SonarServerListener_heartbeat(inS), iceP_upd, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_serverUp(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    istr->read(iceP_msg);
    inS.endReadParams();
    this->serverUp_async(new IceAsync::sonar::AMD_SonarServerListener_serverUp(inS), iceP_msg, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceD_serverDown(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_msg;
    istr->read(iceP_msg);
    inS.endReadParams();
    this->serverDown_async(new IceAsync::sonar::AMD_SonarServerListener_serverDown(inS), iceP_msg, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_sonar_SonarServerListener_all[] =
{
    "heartbeat",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onUpdate",
    "serverDown",
    "serverUp"
};

}

/// \cond INTERNAL
bool
sonar::SonarServerListener::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_sonar_SonarServerListener_all, iceC_sonar_SonarServerListener_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_sonar_SonarServerListener_all)
    {
        case 0:
        {
            return _iceD_heartbeat(in, current);
        }
        case 1:
        {
            return _iceD_ice_id(in, current);
        }
        case 2:
        {
            return _iceD_ice_ids(in, current);
        }
        case 3:
        {
            return _iceD_ice_isA(in, current);
        }
        case 4:
        {
            return _iceD_ice_ping(in, current);
        }
        case 5:
        {
            return _iceD_onImage(in, current);
        }
        case 6:
        {
            return _iceD_onUpdate(in, current);
        }
        case 7:
        {
            return _iceD_serverDown(in, current);
        }
        case 8:
        {
            return _iceD_serverUp(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
sonar::SonarServerListener::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SonarServerListener, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
sonar::SonarServerListener::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SonarServerListener, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
sonar::_icePatchObjectPtr(SonarServerListenerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SonarServerListenerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SonarServerListener::ice_staticId(), v);
    }
}
/// \endcond

sonar::SonarServer::~SonarServer()
{
}

/// \cond INTERNAL
::Ice::Object* sonar::upCast(SonarServer* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_sonar_SonarServer_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServer"
};

}

bool
sonar::SonarServer::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_sonar_SonarServer_ids, iceC_sonar_SonarServer_ids + 2, s);
}

::std::vector< ::std::string>
sonar::SonarServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_sonar_SonarServer_ids[0], &iceC_sonar_SonarServer_ids[2]);
}

const ::std::string&
sonar::SonarServer::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
sonar::SonarServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::sonar::SonarServer";
    return typeId;
#else
    return iceC_sonar_SonarServer_ids[1];
#endif
}

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_onStatus(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ServerStatusSeq iceP_s;
    istr->read(iceP_s);
    inS.endReadParams();
    this->onStatus_async(new IceAsync::sonar::AMD_SonarServer_onStatus(inS), iceP_s, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_addListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SonarServerListenerPtr iceP_listener;
    istr->read(iceP_listener);
    istr->readPendingValues();
    inS.endReadParams();
    this->addListener_async(new IceAsync::sonar::AMD_SonarServer_addListener(inS), iceP_listener, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_removeListener(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    SonarServerListenerPtr iceP_listener;
    istr->read(iceP_listener);
    istr->readPendingValues();
    inS.endReadParams();
    this->removeListener_async(new IceAsync::sonar::AMD_SonarServer_removeListener(inS), iceP_listener, current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_getStatuses(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->getStatuses_async(new IceAsync::sonar::AMD_SonarServer_getStatuses(inS), current);
    return false;
}
/// \endcond

/// \cond INTERNAL
bool
sonar::SonarServer::_iceD_loadConfig(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::std::string iceP_fn;
    istr->read(iceP_fn);
    inS.endReadParams();
    this->loadConfig_async(new IceAsync::sonar::AMD_SonarServer_loadConfig(inS), iceP_fn, current);
    return false;
}
/// \endcond

namespace
{
const ::std::string iceC_sonar_SonarServer_all[] =
{
    "addListener",
    "getStatuses",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadConfig",
    "onStatus",
    "removeListener"
};

}

/// \cond INTERNAL
bool
sonar::SonarServer::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_sonar_SonarServer_all, iceC_sonar_SonarServer_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_sonar_SonarServer_all)
    {
        case 0:
        {
            return _iceD_addListener(in, current);
        }
        case 1:
        {
            return _iceD_getStatuses(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_loadConfig(in, current);
        }
        case 7:
        {
            return _iceD_onStatus(in, current);
        }
        case 8:
        {
            return _iceD_removeListener(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
sonar::SonarServer::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SonarServer, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
sonar::SonarServer::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SonarServer, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
sonar::_icePatchObjectPtr(SonarServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SonarServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SonarServer::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
