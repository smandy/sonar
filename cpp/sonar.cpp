// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `sonar.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <sonar.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __sonar__SonarServerListener__onImage_name = "onImage";

const ::std::string __sonar__SonarServerListener__onUpdate_name = "onUpdate";

const ::std::string __sonar__SonarServerListener__heartbeat_name = "heartbeat";

const ::std::string __sonar__SonarServerListener__serverUp_name = "serverUp";

const ::std::string __sonar__SonarServerListener__serverDown_name = "serverDown";

const ::std::string __sonar__SonarServer__onStatus_name = "onStatus";

const ::std::string __sonar__SonarServer__addListener_name = "addListener";

const ::std::string __sonar__SonarServer__removeListener_name = "removeListener";

const ::std::string __sonar__SonarServer__addListenerByIdent_name = "addListenerByIdent";

const ::std::string __sonar__SonarServer__removeListenerByIdent_name = "removeListenerByIdent";

const ::std::string __sonar__SonarServer__getStatuses_name = "getStatuses";

const ::std::string __sonar__SonarServer__loadConfig_name = "loadConfig";

}

namespace Ice
{
}

IceAsync::sonar::AMD_SonarServerListener_onImage::AMD_SonarServerListener_onImage(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_onImage::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServerListener_onUpdate::AMD_SonarServerListener_onUpdate(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_onUpdate::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServerListener_heartbeat::AMD_SonarServerListener_heartbeat(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_heartbeat::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServerListener_serverUp::AMD_SonarServerListener_serverUp(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_serverUp::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServerListener_serverDown::AMD_SonarServerListener_serverDown(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServerListener_serverDown::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_onStatus::AMD_SonarServer_onStatus(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_onStatus::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_addListener::AMD_SonarServer_addListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_addListener::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_removeListener::AMD_SonarServer_removeListener(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_removeListener::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_addListenerByIdent::AMD_SonarServer_addListenerByIdent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_addListenerByIdent::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_removeListenerByIdent::AMD_SonarServer_removeListenerByIdent(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_removeListenerByIdent::ice_response()
{
    if(__validateResponse(true))
    {
        __writeEmptyParams();
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_getStatuses::AMD_SonarServer_getStatuses(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_getStatuses::ice_response(const ::sonar::ServerStatusSeq& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

IceAsync::sonar::AMD_SonarServer_loadConfig::AMD_SonarServer_loadConfig(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::sonar::AMD_SonarServer_loadConfig::ice_response(::Ice::Int __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}
::IceProxy::Ice::Object* ::IceProxy::sonar::upCast(::IceProxy::sonar::SonarServerListener* p) { return p; }

void
::IceProxy::sonar::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServerListener>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::sonar::SonarServerListener;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::sonar::SonarServerListener::onImage(const ::sonar::Image& __p_img, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServerListener__onImage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_img);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::begin_onImage(const ::sonar::Image& __p_img, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServerListener__onImage_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServerListener__onImage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_img);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServerListener::end_onImage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServerListener__onImage_name);
}

void
IceProxy::sonar::SonarServerListener::onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServerListener__onUpdate_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_upd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::begin_onUpdate(const ::sonar::Update& __p_upd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServerListener__onUpdate_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServerListener__onUpdate_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_upd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServerListener::end_onUpdate(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServerListener__onUpdate_name);
}

void
IceProxy::sonar::SonarServerListener::heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServerListener__heartbeat_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_upd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::begin_heartbeat(const ::sonar::Update& __p_upd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServerListener__heartbeat_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServerListener__heartbeat_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_upd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServerListener::end_heartbeat(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServerListener__heartbeat_name);
}

void
IceProxy::sonar::SonarServerListener::serverUp(const ::std::string& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServerListener__serverUp_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::begin_serverUp(const ::std::string& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServerListener__serverUp_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServerListener__serverUp_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServerListener::end_serverUp(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServerListener__serverUp_name);
}

void
IceProxy::sonar::SonarServerListener::serverDown(const ::std::string& __p_msg, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServerListener__serverDown_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServerListener::begin_serverDown(const ::std::string& __p_msg, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServerListener__serverDown_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServerListener__serverDown_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_msg);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServerListener::end_serverDown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServerListener__serverDown_name);
}

const ::std::string&
IceProxy::sonar::SonarServerListener::ice_staticId()
{
    return ::sonar::SonarServerListener::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::sonar::SonarServerListener::__newInstance() const
{
    return new SonarServerListener;
}
::IceProxy::Ice::Object* ::IceProxy::sonar::upCast(::IceProxy::sonar::SonarServer* p) { return p; }

void
::IceProxy::sonar::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::sonar::SonarServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::sonar::SonarServer;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::sonar::SonarServer::onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__onStatus_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_onStatus(const ::sonar::ServerStatusSeq& __p_s, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__onStatus_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__onStatus_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_s);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServer::end_onStatus(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServer__onStatus_name);
}

void
IceProxy::sonar::SonarServer::addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__addListener_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_addListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__addListener_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__addListener_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServer::end_addListener(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServer__addListener_name);
}

void
IceProxy::sonar::SonarServer::removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__removeListener_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __os->writePendingObjects();
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_removeListener(const ::sonar::SonarServerListenerPtr& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__removeListener_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__removeListener_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __os->writePendingObjects();
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServer::end_removeListener(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServer__removeListener_name);
}

void
IceProxy::sonar::SonarServer::addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__addListenerByIdent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_addListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__addListenerByIdent_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__addListenerByIdent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServer::end_addListenerByIdent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServer__addListenerByIdent_name);
}

void
IceProxy::sonar::SonarServer::removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__removeListenerByIdent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_removeListenerByIdent(const ::Ice::Identity& __p_listener, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__removeListenerByIdent_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__removeListenerByIdent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_listener);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::sonar::SonarServer::end_removeListenerByIdent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __sonar__SonarServer__removeListenerByIdent_name);
}

::sonar::ServerStatusSeq
IceProxy::sonar::SonarServer::getStatuses(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__sonar__SonarServer__getStatuses_name);
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__getStatuses_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::sonar::ServerStatusSeq __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_getStatuses(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__sonar__SonarServer__getStatuses_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__getStatuses_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__getStatuses_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::__begin_getStatuses(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::sonar::ServerStatusSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::sonar::ServerStatusSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
            ::sonar::ServerStatusSeq __ret;
            try
            {
                __ret = __proxy->end_getStatuses(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::sonar::ServerStatusSeq&)> _response;
    };
    return begin_getStatuses(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::sonar::ServerStatusSeq
IceProxy::sonar::SonarServer::end_getStatuses(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __sonar__SonarServer__getStatuses_name);
    ::sonar::ServerStatusSeq __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Ice::Int
IceProxy::sonar::SonarServer::loadConfig(const ::std::string& __p_fn, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__sonar__SonarServer__loadConfig_name);
    ::IceInternal::Outgoing __og(this, __sonar__SonarServer__loadConfig_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fn);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Ice::Int __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__sonar__SonarServer__loadConfig_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __sonar__SonarServer__loadConfig_name, __del, __cookie);
    try
    {
        __result->prepare(__sonar__SonarServer__loadConfig_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_fn);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::sonar::SonarServer::__begin_loadConfig(const ::std::string& __p_fn, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::sonar::SonarServerPrx __proxy = ::sonar::SonarServerPrx::uncheckedCast(__result->getProxy());
            ::Ice::Int __ret;
            try
            {
                __ret = __proxy->end_loadConfig(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (::Ice::Int)> _response;
    };
    return begin_loadConfig(__p_fn, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Ice::Int
IceProxy::sonar::SonarServer::end_loadConfig(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __sonar__SonarServer__loadConfig_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::sonar::SonarServer::ice_staticId()
{
    return ::sonar::SonarServer::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::sonar::SonarServer::__newInstance() const
{
    return new SonarServer;
}

::Ice::Object* sonar::upCast(::sonar::SonarServerListener* p) { return p; }

namespace
{
const ::std::string __sonar__SonarServerListener_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServerListener"
};

}

bool
sonar::SonarServerListener::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__sonar__SonarServerListener_ids, __sonar__SonarServerListener_ids + 2, _s);
}

::std::vector< ::std::string>
sonar::SonarServerListener::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__sonar__SonarServerListener_ids[0], &__sonar__SonarServerListener_ids[2]);
}

const ::std::string&
sonar::SonarServerListener::ice_id(const ::Ice::Current&) const
{
    return __sonar__SonarServerListener_ids[1];
}

const ::std::string&
sonar::SonarServerListener::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::sonar::SonarServerListener";
    return typeId;
#else
    return __sonar__SonarServerListener_ids[1];
#endif
}

::Ice::DispatchStatus
sonar::SonarServerListener::___onImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::Image __p_img;
    __is->read(__p_img);
    __inS.endReadParams();
    ::sonar::AMD_SonarServerListener_onImagePtr __cb = new IceAsync::sonar::AMD_SonarServerListener_onImage(__inS);
    try
    {
        onImage_async(__cb, __p_img, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServerListener::___onUpdate(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::Update __p_upd;
    __is->read(__p_upd);
    __inS.endReadParams();
    ::sonar::AMD_SonarServerListener_onUpdatePtr __cb = new IceAsync::sonar::AMD_SonarServerListener_onUpdate(__inS);
    try
    {
        onUpdate_async(__cb, __p_upd, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServerListener::___heartbeat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::Update __p_upd;
    __is->read(__p_upd);
    __inS.endReadParams();
    ::sonar::AMD_SonarServerListener_heartbeatPtr __cb = new IceAsync::sonar::AMD_SonarServerListener_heartbeat(__inS);
    try
    {
        heartbeat_async(__cb, __p_upd, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServerListener::___serverUp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    ::sonar::AMD_SonarServerListener_serverUpPtr __cb = new IceAsync::sonar::AMD_SonarServerListener_serverUp(__inS);
    try
    {
        serverUp_async(__cb, __p_msg, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServerListener::___serverDown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_msg;
    __is->read(__p_msg);
    __inS.endReadParams();
    ::sonar::AMD_SonarServerListener_serverDownPtr __cb = new IceAsync::sonar::AMD_SonarServerListener_serverDown(__inS);
    try
    {
        serverDown_async(__cb, __p_msg, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __sonar__SonarServerListener_all[] =
{
    "heartbeat",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "onImage",
    "onUpdate",
    "serverDown",
    "serverUp"
};

}

::Ice::DispatchStatus
sonar::SonarServerListener::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__sonar__SonarServerListener_all, __sonar__SonarServerListener_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __sonar__SonarServerListener_all)
    {
        case 0:
        {
            return ___heartbeat(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
        case 5:
        {
            return ___onImage(in, current);
        }
        case 6:
        {
            return ___onUpdate(in, current);
        }
        case 7:
        {
            return ___serverDown(in, current);
        }
        case 8:
        {
            return ___serverUp(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
sonar::SonarServerListener::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
sonar::SonarServerListener::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
sonar::__patch(SonarServerListenerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::sonar::SonarServerListenerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::sonar::SonarServerListener::ice_staticId(), v);
    }
}

::Ice::Object* sonar::upCast(::sonar::SonarServer* p) { return p; }

namespace
{
const ::std::string __sonar__SonarServer_ids[2] =
{
    "::Ice::Object",
    "::sonar::SonarServer"
};

}

bool
sonar::SonarServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__sonar__SonarServer_ids, __sonar__SonarServer_ids + 2, _s);
}

::std::vector< ::std::string>
sonar::SonarServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__sonar__SonarServer_ids[0], &__sonar__SonarServer_ids[2]);
}

const ::std::string&
sonar::SonarServer::ice_id(const ::Ice::Current&) const
{
    return __sonar__SonarServer_ids[1];
}

const ::std::string&
sonar::SonarServer::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::sonar::SonarServer";
    return typeId;
#else
    return __sonar__SonarServer_ids[1];
#endif
}

::Ice::DispatchStatus
sonar::SonarServer::___onStatus(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::ServerStatusSeq __p_s;
    __is->read(__p_s);
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_onStatusPtr __cb = new IceAsync::sonar::AMD_SonarServer_onStatus(__inS);
    try
    {
        onStatus_async(__cb, __p_s, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___addListener(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::SonarServerListenerPtr __p_listener;
    __is->read(__p_listener);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_addListenerPtr __cb = new IceAsync::sonar::AMD_SonarServer_addListener(__inS);
    try
    {
        addListener_async(__cb, __p_listener, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___removeListener(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::sonar::SonarServerListenerPtr __p_listener;
    __is->read(__p_listener);
    __is->readPendingObjects();
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_removeListenerPtr __cb = new IceAsync::sonar::AMD_SonarServer_removeListener(__inS);
    try
    {
        removeListener_async(__cb, __p_listener, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___addListenerByIdent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity __p_listener;
    __is->read(__p_listener);
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_addListenerByIdentPtr __cb = new IceAsync::sonar::AMD_SonarServer_addListenerByIdent(__inS);
    try
    {
        addListenerByIdent_async(__cb, __p_listener, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___removeListenerByIdent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Identity __p_listener;
    __is->read(__p_listener);
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_removeListenerByIdentPtr __cb = new IceAsync::sonar::AMD_SonarServer_removeListenerByIdent(__inS);
    try
    {
        removeListenerByIdent_async(__cb, __p_listener, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___getStatuses(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::sonar::AMD_SonarServer_getStatusesPtr __cb = new IceAsync::sonar::AMD_SonarServer_getStatuses(__inS);
    try
    {
        getStatuses_async(__cb, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

::Ice::DispatchStatus
sonar::SonarServer::___loadConfig(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_fn;
    __is->read(__p_fn);
    __inS.endReadParams();
    ::sonar::AMD_SonarServer_loadConfigPtr __cb = new IceAsync::sonar::AMD_SonarServer_loadConfig(__inS);
    try
    {
        loadConfig_async(__cb, __p_fn, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __sonar__SonarServer_all[] =
{
    "addListener",
    "addListenerByIdent",
    "getStatuses",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "loadConfig",
    "onStatus",
    "removeListener",
    "removeListenerByIdent"
};

}

::Ice::DispatchStatus
sonar::SonarServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__sonar__SonarServer_all, __sonar__SonarServer_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __sonar__SonarServer_all)
    {
        case 0:
        {
            return ___addListener(in, current);
        }
        case 1:
        {
            return ___addListenerByIdent(in, current);
        }
        case 2:
        {
            return ___getStatuses(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
        case 7:
        {
            return ___loadConfig(in, current);
        }
        case 8:
        {
            return ___onStatus(in, current);
        }
        case 9:
        {
            return ___removeListener(in, current);
        }
        case 10:
        {
            return ___removeListenerByIdent(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
sonar::SonarServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
sonar::SonarServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
sonar::__patch(SonarServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::sonar::SonarServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::sonar::SonarServer::ice_staticId(), v);
    }
}
